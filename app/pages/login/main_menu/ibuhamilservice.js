"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var config_1 = require("../../../utils/config");
var nativescript_loading_indicator_1 = require("nativescript-loading-indicator");
var Ibuhamilservice = (function () {
    function Ibuhamilservice(http) {
        this.http = http;
        this.loadingindicator = new nativescript_loading_indicator_1.LoadingIndicator();
    }
    Ibuhamilservice.prototype.getOrangTuas = function () {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.get(config_1.Config.urlAPI + '/hamil/orangtua', { headers: config_1.Config.createHeaders() })
            .finally(function () { return _this.loadingindicator.hide(); })
            .catch(config_1.Config.errorCatcher);
    };
    Ibuhamilservice.prototype.pair = function (args) {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.post(config_1.Config.urlAPI + '/hamil/pair', args, { headers: config_1.Config.createHeaders() })
            .finally(function () { return _this.loadingindicator.hide(); })
            .catch(config_1.Config.errorCatcher);
    };
    Ibuhamilservice.prototype.unpair = function (args) {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.post(config_1.Config.urlAPI + "/hamil/unpair", args, { headers: config_1.Config.createHeaders() })
            .finally(function () { return _this.loadingindicator.hide(); })
            .catch(config_1.Config.errorCatcher);
    };
    Ibuhamilservice.prototype.getPregnancies = function (idorangtua) {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.get(config_1.Config.urlAPI + '/hamil/' + idorangtua + '/all', { headers: config_1.Config.createHeaders() })
            .finally(function () { return _this.loadingindicator.hide(); })
            .catch(config_1.Config.errorCatcher);
    };
    Ibuhamilservice.prototype.addPregnancies = function (idorangtua, args) {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.post(config_1.Config.urlAPI + "/hamil/" + idorangtua + "/add", args, { headers: config_1.Config.createHeaders() })
            .finally(function () { return _this.loadingindicator.hide(); })
            .catch(config_1.Config.errorCatcher);
    };
    Ibuhamilservice.prototype.editPregnancies = function (idorangtua, idhamil, args) {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.put(config_1.Config.urlAPI + '/hamil/' + idorangtua + '/' + idhamil, args, { headers: config_1.Config.createHeaders() })
            .finally(function () { return _this.loadingindicator.hide(); })
            .catch(config_1.Config.errorCatcher);
    };
    Ibuhamilservice.prototype.deletePreg = function (hamil_id) {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.delete(config_1.Config.urlAPI + '/hamil/0/' + hamil_id, { headers: config_1.Config.createHeaders() })
            .finally(function () { return _this.loadingindicator.hide(); })
            .catch(config_1.Config.errorCatcher);
    };
    Ibuhamilservice = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], Ibuhamilservice);
    return Ibuhamilservice;
}());
exports.Ibuhamilservice = Ibuhamilservice;
//# sourceMappingURL=data:application/json;base64,