"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Pemeriksaan_1 = require("./Pemeriksaan");
var router_1 = require("@angular/router");
var pemeriksaan_service_1 = require("../pemeriksaan.service");
var Toast = require("nativescript-toast");
var nativescript_angular_1 = require("nativescript-angular");
var PemeriksaanComponent = (function () {
    function PemeriksaanComponent(actRoute, serv, rouex) {
        var _this = this;
        this.actRoute = actRoute;
        this.serv = serv;
        this.rouex = rouex;
        this.keadanumum = [{ key: 0, label: 'Baik' },
            { key: 1, label: 'Lemah' },
            { key: 2, label: 'Tampak Anemis' }];
        this.keadaankhusus = [{ key: 0, label: 'Tidak Ada' },
            { key: 1, label: 'Bengkak Muka/Tungkai' },
            { key: 2, label: 'Kembar Air' },
            { key: 3, label: 'Kejang-kejang' }];
        this.pone = [{ key: 0, label: '-' }, { key: 1, label: '+' }];
        this.proteinurine = ["Tidak Diperiksa", "Negatif", "+1", "+2", "Lebih dari +2 "];
        this.glukosa = ["Tidak diperiksa", "Reduksi +", "Reduksi -"];
        this.goldar = ["Belum diperiksa", "A", "B", "AB", "O"];
        this.yatak = [{ key: 0, label: 'Tidak' }, { key: 1, label: 'Ya' }];
        this.hima = [{ key: 0, label: 'mati' }, { key: 1, label: 'hidup' }];
        this.komplikasi = [
            { key: 0, label: 'HDK' },
            { key: 1, label: 'abortus' },
            { key: 2, label: 'perdarahan' },
            { key: 3, label: 'infeksi' },
            { key: 4, label: 'KPD' },
            { key: 5, label: 'lainnya' },
            { key: 6, label: 'tidak ada' }
        ];
        this.dirujuk = [
            { key: 0, label: 'Puskesmas' },
            { key: 1, label: 'Rumah sakit bersalin' },
            { key: 2, label: 'Rumah salit ibu anak' },
            { key: 3, label: 'Rumah sakit' },
            { key: 4, label: 'lainnya' },
            { key: 5, label: 'tidak dirujuk' }
        ];
        this.isedit = false;
        this.pemeriksaan = new Pemeriksaan_1.Pemeriksaan();
        this.actRoute.queryParams.subscribe(function (params) {
            _this.id_kehamilan = params.id_kehamilan;
            if (params.data) {
                console.log(params.data);
                _this.id_pemeriksaan = params.id_pemeriksaan;
                _this.pemeriksaan = JSON.parse(params.data);
                _this.isedit = true;
            }
        });
    }
    PemeriksaanComponent.prototype.save = function () {
        var _this = this;
        console.log("telo " + console.log(JSON.stringify(this.pemeriksaan)), null, "\t");
        if (this.isedit) {
            this.serv.update(this.id_kehamilan, this.pemeriksaan.id, this.pemeriksaan).subscribe(function (res) {
                Toast.makeText(res.message).show();
                _this.rouex.backToPreviousPage();
            }, function (err) { return Toast.makeText(err.json().message).show(); });
        }
        else {
            this.serv.store(this.id_kehamilan, this.pemeriksaan).subscribe(function (res) {
                Toast.makeText(res.message).show();
                _this.rouex.backToPreviousPage();
            }, function (err) { return Toast.makeText(err.json().message).show(); });
        }
    };
    PemeriksaanComponent.prototype.ngOnInit = function () { };
    PemeriksaanComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-pemeriksaan',
            templateUrl: './pemeriksaan.component.html',
            styleUrls: ['./pemeriksaan.component.css'],
            providers: [pemeriksaan_service_1.PemeriksaanService]
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute,
            pemeriksaan_service_1.PemeriksaanService,
            nativescript_angular_1.RouterExtensions])
    ], PemeriksaanComponent);
    return PemeriksaanComponent;
}());
exports.PemeriksaanComponent = PemeriksaanComponent;
//# sourceMappingURL=data:application/json;base64,