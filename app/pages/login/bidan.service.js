"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var config_1 = require("../../utils/config");
var BidanService = (function () {
    function BidanService(http) {
        this.http = http;
    }
    BidanService.prototype.login = function (user) {
        var headers = new http_1.Headers();
        headers.append("Secret", "fEZYTJ8L2K8y94fmJ8c94stx6plDmL62");
        return this.http.post(config_1.Config.urlAPI + "/login", user, { headers: headers })
            .map(function (response) { return response.json(); })
            .do(function (data) {
            console.log("balasan" + JSON.stringify(data));
        })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.profile = function () {
        return this.http.get(config_1.Config.urlAPI + "/bidan/profile", { headers: config_1.Config.getHeaders() })
            .map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.updateProfile = function (profile) {
        return this.http.put(config_1.Config.urlAPI + "/bidan/profile", profile, { headers: config_1.Config.getHeaders() }).map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.changeDisclaimer = function (disc) {
        return this.http.put(config_1.Config.urlAPI + "/disclaimer", JSON.stringify(disc), { headers: config_1.Config.getHeaders() }).map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.logout = function () {
        return this.http.post(config_1.Config.urlAPI + "/logout", "", { headers: config_1.Config.getHeaders() })
            .map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.provinsi = function () {
        return this.http.get(config_1.Config.urlAPI + "/provinsi", { headers: config_1.Config.getHeaders() })
            .map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.kabupaten = function (id) {
        return this.http.get(config_1.Config.urlAPI + "/kabupaten/" + id, { headers: config_1.Config.getHeaders() })
            .map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.kecamatan = function (id) {
        return this.http.get(config_1.Config.urlAPI + "/kecamatan/" + id, { headers: config_1.Config.getHeaders() })
            .map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.puskesmas = function (id) {
        return this.http.get(config_1.Config.urlAPI + "/puskesmas/" + id, { headers: config_1.Config.getHeaders() })
            .map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService.prototype.kelurahan = function (id) {
        return this.http.get(config_1.Config.urlAPI + "/kelurahan/" + id, { headers: config_1.Config.getHeaders() })
            .map(function (res) { return res.json(); })
            .catch(config_1.Config.handleErrors);
    };
    BidanService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], BidanService);
    return BidanService;
}());
exports.BidanService = BidanService;
//# sourceMappingURL=data:application/json;base64,