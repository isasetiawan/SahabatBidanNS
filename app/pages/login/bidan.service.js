"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var config_1 = require("../../utils/config");
require("rxjs/add/operator/map");
var nativescript_loading_indicator_1 = require("nativescript-loading-indicator");
var BidanService = (function () {
    function BidanService(http) {
        this.http = http;
        this.loadingindicator = new nativescript_loading_indicator_1.LoadingIndicator();
    }
    BidanService.prototype.login = function (user) {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        var option = new http_1.HttpHeaders({ 'Secret': config_1.Config.keyAPI });
        return this.http.post(config_1.Config.urlAPI + "/login", user, { headers: option })
            .finally(function () { return _this.loadingindicator.hide(); })
            .catch(config_1.Config.errorCatcher);
    };
    BidanService.prototype.refresh = function () {
        return this.http.post(config_1.Config.urlAPI + "/refresh", {}, { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher);
    };
    BidanService.prototype.profile = function () {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.get(config_1.Config.urlAPI + "/bidan/profile", { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher)
            .finally(function () { return _this.loadingindicator.hide(); });
    };
    BidanService.prototype.updateProfile = function (profile) {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.put(config_1.Config.urlAPI + "/bidan/profile", profile, { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher)
            .finally(function () { return _this.loadingindicator.hide(); });
    };
    //TODO: method ini belum diimplementasi
    BidanService.prototype.changeDisclaimer = function (disc) {
        return this.http.put(config_1.Config.urlAPI + "/disclaimer", JSON.stringify(disc), { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher);
    };
    BidanService.prototype.logout = function () {
        var _this = this;
        this.loadingindicator.show(config_1.Config.progress_dialog_options);
        return this.http.post(config_1.Config.urlAPI + "/logout", null, { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher)
            .finally(function () { return _this.loadingindicator.hide(); });
    };
    BidanService.prototype.provinsi = function () {
        return this.http.get(config_1.Config.urlAPI + "/provinsi", { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher);
    };
    BidanService.prototype.kabupaten = function (id) {
        return this.http.get(config_1.Config.urlAPI + "/kabupaten/" + id, { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher);
    };
    BidanService.prototype.kecamatan = function (id) {
        return this.http.get(config_1.Config.urlAPI + "/kecamatan/" + id, { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher);
    };
    BidanService.prototype.puskesmas = function (id) {
        return this.http.get(config_1.Config.urlAPI + "/puskesmas/" + id, { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher);
    };
    BidanService.prototype.kelurahan = function (id) {
        return this.http.get(config_1.Config.urlAPI + "/kelurahan/" + id, { headers: config_1.Config.createHeaders() })
            .catch(config_1.Config.errorCatcher);
    };
    BidanService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], BidanService);
    return BidanService;
}());
exports.BidanService = BidanService;
//# sourceMappingURL=data:application/json;base64,